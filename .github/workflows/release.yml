name: Release

on:
  push:
    tags:
    
    branches:
      - darts/*
      - main

  workflow_dispatch:
    inputs:
      tag:
        description: "Tag for release"
        required: true

      message:
        description: "Tag annotation"
        default: "Release: by CI"
        required: false

      branch:
        description: "Branch for release"
        default: "main"
        required: false

permissions:
  contents: write

jobs:
  goreleaser:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          #          don't fetch tag for manual flow
          fetch-tags: ${{ github.event_name != 'workflow_dispatch' }}
          fetch-depth: 2
          ref: ${{ github.event.inputs.branch || github.event.ref }}

      - uses: actions/setup-node@v3
        with:
          cache: "yarn"
          cache-dependency-path: "./webui/yarn.lock"
          node-version: "20.9.0"
          check-latest: true

      - name: Yarn build
        working-directory: ./webui
        run: |
          yarn install
          yarn run build

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version-file: go.mod
          check-latest: true

      - name: Git config
        run: |
          git config --global user.name Hiro
          git config --global user.email laciferin@gmail.com

      - name: Tag
        if: github.event_name == 'workflow_dispatch'
        run: |
          git tag -a ${{ github.event.inputs.tag }} -m "${{ github.event.inputs.tag }}"
          echo "Tag ${{ github.event.inputs.tag }}"

      - name: Set Tag output
        id: vars
        run: |
          #echo "tag=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT
          echo "tag=$(git describe --tags --abbrev=0)" >> $GITHUB_OUTPUT

      - uses: nowsprinting/check-version-format-action@v4
        id: version
        with:
          prefix: "v"

      - name: Version tag only step
        run: |
          echo "Found valid version format in tag!"
          echo "Full version: ${{ steps.version.outputs.full }}"
          echo "Major version: ${{ steps.version.outputs.major }}"
          echo "Major with pre-release: ${{ steps.version.outputs.major_prerelease }}"
        if: steps.version.outputs.is_valid == 'true'

      - name: Stable version only step
        run: |
          echo "Found stable version in tag!"
        if: steps.version.outputs.is_stable == 'true'

      - name: Goreleaser Args
        id: goreleaser-args
        run: |
          args=()

          if [[ "${{ steps.version.outputs.is_valid }}" == "false" && "${{steps.vars.outputs.tag}}"!="latest" ]]; then
            args+='--snapshot'
          fi

          echo "Args is $args"
          echo "args=$args" >> $GITHUB_OUTPUT

      - name: Run GoReleaser
        continue-on-error: true
        uses: goreleaser/goreleaser-action@v5
        with:
          distribution: goreleaser
          version: latest
          install-only: false

          args: |
            release --clean ${{ steps.goreleaser-args.args }}

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload assets
        uses: actions/upload-artifact@v4
        with:
          name: darts
          path: ./dist/*
